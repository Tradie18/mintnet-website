---
// src/layouts/Landing.astro
import { siteMetadata } from '../config/site.ts';

export interface Props {
  title: string;
  description?: string;
}

const { 
  title, 
  description = siteMetadata.description 
} = Astro.props;

const fullTitle = title === 'Mint Network' ? title : `${title} | Mint Network`;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- SEO Meta Tags -->
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={`https://${siteMetadata.siteUrl}`} />
    <meta property="og:site_name" content="Mint Network" />
    
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={fullTitle} />
    <meta name="twitter:description" content={description} />
    
    <!-- Theme Colors -->
    <meta name="theme-color" content="#9a0aab" />
    <meta name="msapplication-TileColor" content="#9a0aab" />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    
    <title>{fullTitle}</title>
    
    <!-- Three.js CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    
    <!-- tsParticles v3 -->
    <script src="https://cdn.jsdelivr.net/npm/tsparticles@2/tsparticles.bundle.min.js"></script>
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Preload critical fonts -->
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Rajdhani:wght@400;500;600;700&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <noscript>
      <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Rajdhani:wght@400;500;600;700&display=swap">
    </noscript>
    
    <!-- Critical CSS for loading state -->
    <style>
      /* Prevent flash of unstyled content */
      html {
        background-color: #0a0a0f;
        color: #f8f8ff;
      }
      
      body {
        margin: 0;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background: radial-gradient(circle at center, #2d2d44 0%, #1a1a2e 50%, #0a0a0f 100%);
        min-height: 100vh;
      }
      
      /* Loading animation */
      .loading-spinner {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
        width: 50px;
        height: 50px;
        border: 3px solid rgba(154, 10, 171, 0.3);
        border-top: 3px solid #9a0aab;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }
      
      @keyframes spin {
        0% { transform: translate(-50%, -50%) rotate(0deg); }
        100% { transform: translate(-50%, -50%) rotate(360deg); }
      }
      
      /* Hide content until loaded */
      .content-loaded {
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
      }
      
      .content-loaded.loaded {
        opacity: 1;
      }
    </style>
  </head>
  <body>
    <!-- Loading spinner -->
    <div class="loading-spinner" id="loading-spinner"></div>
    
    <!-- Main content -->
    <div class="content-loaded" id="main-content">
      <slot />
    </div>
    
    <!-- Global scripts -->
    <script>
      // Hide loading spinner and show content when page is loaded
      window.addEventListener('load', () => {
        const spinner = document.getElementById('loading-spinner');
        const content = document.getElementById('main-content');
        
        if (spinner) {
          spinner.style.display = 'none';
        }
        
        if (content) {
          content.classList.add('loaded');
        }
      });
      
      // Fallback to show content after 3 seconds
      setTimeout(() => {
        const spinner = document.getElementById('loading-spinner');
        const content = document.getElementById('main-content');
        
        if (spinner) {
          spinner.style.display = 'none';
        }
        
        if (content) {
          content.classList.add('loaded');
        }
      }, 3000);
      
      // Enhanced clipboard functionality with better UX
      window.copyToClipboard = async (text, button) => {
        try {
          await navigator.clipboard.writeText(text);
          
          if (button) {
            const originalText = button.textContent;
            const originalColor = button.style.color;
            
            button.textContent = 'Copied!';
            button.style.color = '#00a86b';
            button.style.transform = 'scale(1.05)';
            
            setTimeout(() => {
              button.textContent = originalText;
              button.style.color = originalColor;
              button.style.transform = '';
            }, 2000);
          }
          
          return true;
        } catch (err) {
          console.warn('Copy to clipboard failed:', err);
          
          // Fallback for older browsers
          try {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            textArea.style.position = 'fixed';
            textArea.style.opacity = '0';
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            
            if (button) {
              const originalText = button.textContent;
              button.textContent = 'Copied!';
              setTimeout(() => {
                button.textContent = originalText;
              }, 2000);
            }
            
            return true;
          } catch (fallbackErr) {
            console.warn('Fallback copy failed:', fallbackErr);
            return false;
          }
        }
      };
    </script>
  </body>
</html>